# -*- coding: utf-8 -*-
"""學習分析工具_0004

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1RTsITFXO3ahEVDmnpm0XI6DTpy3oSwh5

# **LATIA113-1**
### 2024/11/07 課程練習與作業

- 姓名 : 邱鈺婷
- 系級 : 科技系116

# 線性迴歸（Linear Regression）
"""

import pandas as pd
import statsmodels.api as sm
import numpy as np

df2 = pd.DataFrame(np.random.randn(100, 4), columns=list("ABCD"))
X = df2['A']
y = df2['B']

# Add a constant to the model (for the intercept term)
X = sm.add_constant(X)
X

# Fit the regression model
model = sm.OLS(y, X).fit()
# Display the regression results
print(model.summary())

"""# 複迴歸"""

import pandas as pd
import statsmodels.api as sm
import numpy as np

# 生成隨機數據
df2 = pd.DataFrame(np.random.randn(100, 4), columns=list("ABCD"))

# 將 `B` 和 `C` 列設為自變量 X，`D` 列設為因變量 y
X = df2.iloc[:, 1:3]  # 這裡選擇了 `B` 和 `C` 列作為自變量
y = df2['D']          # 將 `D` 列作為因變量

# 增加截距項
X = sm.add_constant(X)

# 擬合回歸模型
model = sm.OLS(y, X).fit()

# 顯示回歸結果摘要
print(model.summary())

"""# 隨機森林"""

import pandas as pd
import numpy as np
import statsmodels.api as sm

df = pd.read_csv('A_stat_data_112.csv')

from google.colab import drive
drive.mount('/content/drive')

df.head()

from sklearn.ensemble import RandomForestRegressor
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error

# 假設要預測 'correct_rate' 並使用其他數值型變量作為特徵
df = df.dropna(subset=['correct_rate']) # 去除 'correct_rate' 為 NaN 的行
X = df[['grade', 'first_correct_rate']] # 例選三個特徵
y = df['correct_rate']

# 分割訓練集和測試集
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
# 訓練隨機森林回歸模型
rf_model = RandomForestRegressor(n_estimators=100, random_state=42)
rf_model.fit(X_train, y_train)
# 預測及評估
y_pred = rf_model.predict(X_test)
print("均方誤差 (MSE):", mean_squared_error(y_test, y_pred))

# 將特徵重要性與特徵名稱對應起來
feature_importance = pd.DataFrame({
  'Feature': X.columns,
  'Importance': rf_model.feature_importances_
})

# 顯示特徵重要性
print(feature_importance)

#R2
from sklearn.metrics import r2_score
r2 = r2_score(y_test, y_pred)
print("R^2:", r2)